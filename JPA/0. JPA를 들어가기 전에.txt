JPA가 쉽다고 바로 실무에 사용하는 사람이 고생을 할 수 있다.
이유 : JPA와 Table과 ModelMapping을 정확하게 해야한다.
즉, 예제들은 보통 테이블이 한 두 개로 단순하지만
실무는 수십개 이상의 복잡한 객체와 테이블이 존재한다.

목표 - ★★★★★★★객체와 테이블 설계 매핑★★★★★★

객체와 테이블을 제대로 설계하고 매핑하는 방법
기본 키와 외래 키 매핑
1:N, N:1, 1:1, N:M 매핑
실무 노하우 + 성능가지 고려
어떠한 복잡한 시스템도 JPA로 설계 가능

목표 - ★★★★★JPA 내부 동작 방식 이해★★★★★★★

JPA의 내부 동작 방식을 이해하지 못하고 사용
JPA 내부 동작 방식을 그림과 코드로 자세히 설명
JPA가 어떤 SQL을 만들어 내는지 이해
JPA가 언제 SQL을 실행하는지 이해

객체지향 VS 관계형 DB

객체지향 프로그래밍은 : 추상화, 캡슐화, 정보은닉, 상속, 다형성 등 시스템의 복잡성을 제어할 수 있는 다양한 장치들을 제공한다.

객체를 영구 보관하는 다양한 저장소

현실적인 대안은 관계형 데이터 베이스
객체 -> SQL변환 -> SQL RDB
SQL mapper

차이점
상속, 연관관계, 데이터 타입, 데이터 식별 방법


하지만 DB에서는 존재하지 않기 때문에
객체 상속 관계를 Table 슈퍼타입 서브타입 관계로 저장을 할 수는 있다.
즉, 슈퍼 타입인 table을 만들고 이 table의 PK를 서브타입 table에서 FK로 가져가서 Join을 통해서 
관계를 형성하는 방법이다.


객체는 참조를 사용 : member.getTeam()
테이블은 외래 키를 사용 : JOIN ON M.TEAM_ID = T.TEAM_ID


객체를 테이블에 맞추어 모델링




객체를 자바 컬렉션에 저장하듯이 DB에 저장할 수 없을까?
해서 생긴게 Java Persistence API JPA가 생기게 되었다.














