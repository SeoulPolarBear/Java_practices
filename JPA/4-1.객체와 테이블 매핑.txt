엔티티 매핑 소개

- 객체와 테이블 매핑 : @Entity, @Table
- 필드와 컬럼 매핑 : @Column
- 기본키 매핑 : @Id
- 연관관계 매핑 : @ManyToOne, @JoinColumn

------------------------------------------------------------
객체와 테이블 매핑 
-----------
@Entity
- @Entity가 붙은 클래스는 JPA가 관리, 엔티티라 한다.
- JPA를 사용해서 테이블과 매핑할 클래스는 @Entity 필수

주의 사항
- 기본생성자 필수(파라미터가 없는 public 또는 protected 생성자)
- final 클래스, enum, interface, inner 클래스 사용 X
- 저장할 필드에 final 사용 X

속성 : name
- JPA에서 사용할 엔티티 이름을 지정한다.
- 기본값 : 클래스 이름을 그대로 사용 (ex : Member)
- 같은 클래스 이름이 없으면 가급적 기본값을 사용한다.


-----------
@Table
엔티티와 매핑할 테이블 지정

속성
name : 매핑할 테이블 이름 즉, default로 엔티티 이름을 사용하지만 회사 규정상 
테이블 이름이 정해져 있을 때 사용하면 된다.

catalog : 데이터베이스 catalog 매핑

schema : 데이터베이스 schema 매핑

uniqueConstraints(DDL) : DDL 생성 시에 유니크 제약 조건 생성


------------------------------------------------------------
DDL 생성 기능
- 제약조건 추가 : 회원 이름은 필수, 10자 초과 X
	- @Column(nullable=false, length=10)
- 유니크 제약조건 추가
	- @Table(uniqueConstraints={@UniqueConstraint(name="NAME_AGE_UNIQUE",
									columnNames={"NAME","AGE"})})

-DDL 생성 기능은 DDL을 자동 생성할 때만 사용되고 JPA의 실행 로직에는 영향을 주지 않는다.









----------------------------------------------------------------------------------------------------
데이터베이스  스키마 자동 생성 
- DDL을 애플리케이션 실행 시점에 자동 생성
- 테이블 중심 -> 객체 중심
- 데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절항 DDL 생성
- 이렇게 생성된 DDL은 개발 장비에서만 사용
- 생성된 DDL은 운영서버에서는 사용하지 않거나, 적절히 다듬은 후 사용

---------
속성
create : 기존테이블 삭제 후 다시 생성(DROP + CREATE)
create-drop : create와 같으나 종료시점에 테이블 DROP (주로 testcase에 사용된다.)
update : 변경분만 반영(운영DB에는 사용하면 안 된다.)
validate : 엔티티와 테이블이 정상 매핑되었는지만 확인
(만약 내가 Column 등 변경사항이 있을 시 오류가 발생한다.)
none : 사용하지 않음(주석처럼 사용하면 된다.)


---------
★★★★★★★주의사항 ★★★★★★★★★
- 운영 장비에는 절대 create, create-drop, update 사용하면 안된다.
: drop은 절대 사용하면 안되며 
update(alter)를 자동화 시키면 결국 서버가 lock 걸릴 수 있기 때문에 사용하면 안된다.


- 개발 초기 단계는 create 또는 update
- 테스트 서버는 update 또는 validate
- 스테이징과 운영 서버는 validate 또는 none



















