Select문을 읽을 때 PostgreSQL은 뒤에서 부터 읽는다

Select column_name From table_name
즉, table_name읽고 검토
즉, 참조할 테이블 이름을 검토 후에 열을 검토합니다.

데이터베이스를 사용시 SELECT * FROM TABLE 과 같이 *를 사용하는 것으 바람직 하지 않습니다.
이유는 데이터 베이스 서버와 애플리케이션 상이의 트래픽이 증가하고
그로 인해 검색 시간이 오래 걸립니다.


SELECT문을 사용하여 모든 고객의 성과 이름 그리고 해당되는 이메일 주소를 가져와 보시오

SELECT FIRST_NAME,LAST_NAME,EMAIL FROM CUSTOMER;

----------------------------------------------------------------------
DISTINCT

중복 되는 행을 없애줍니다.
SELECT DISTINCT RELEASE_YEAR FROM FILM;
 SELECT DISTINCT (RELEASE_YEAR) FROM FILM;

Distinct SQL의 주요 문제점은 다음과 같습니다.
---------------
1. 성능 문제: DISTINCT는 중복된 데이터를 제거하기 위해 데이터베이스 엔진에서 많은 작업을 수행합니다. 
이로 인해 쿼리의 실행 속도가 느려질 수 있습니다.

---------------
2. 정확성 문제: DISTINCT는 중복된 데이터를 제거하지만, 이 작업이 쉽지 않을 수 있습니다. 
예를 들어, NULL 값이 포함된 열에서 DISTINCT를 사용하면, 결과가 예상과 다를 수 있습니다.

---------------
3. 복잡성 문제: DISTINCT를 사용하면 쿼리가 복잡해지는 경우가 많습니다. 
예를 들어, 여러 개의 열에 대해 DISTINCT를 사용하면, 쿼리가 매우 복잡해질 수 있습니다.

---------------
4. 메모리 문제: DISTINCT는 중복된 데이터를 제거하기 위해 메모리를 사용합니다. 
따라서, 대량의 데이터를 처리할 때 메모리 부족 문제가 발생할 수 있습니다.

---------------
5. 결과 문제: DISTINCT를 사용하면, 결과가 예상과 다를 수 있습니다. 
예를 들어, DISTINCT를 사용하면, 원래 데이터에서 중복된 값을 제거하게 됩니다. 
이 때, 중복된 값이 포함된 행 전체가 제거될 수 있습니다. 따라서, 결과가 원래 데이터와 다를 수 있습니다.


실습 문제 
영화의 등급을 중복 없이 보여주시오
SELECT DISTINCT (rating) FROM FILM;



----------------------------------------------------------------------
COUNT

SELECT COUNT(name) FROM table;
행 개수 반환

테이블에 고유한 이름이 몇 개인가?를 알고 싶을 때
SELECT COUNT(DISTINCTname) FROM table;

여기서 주의할 점 : *을 사용하기 보다는 특정 열을 적는 것이 중요합니다.
그 이유는 *은 전체를 순회하기 때문에 최적화가 덜 됩니다.

