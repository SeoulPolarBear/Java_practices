ls 시
속성 및 권한    하드링크	   소유자	    소유그룹    사이즈    수정 시간    파일이름

ls -l : 파일들을

ls -a 시 .이 있는 파일은 숨김 파일임을 알 수 있다.
.. : 상위
. : 자기 자신

ls -i : i-node 값들을 보여준다
(고유의 값을 갖는다.)
뒤에 @있는 게 심볼릭 링크이다
뒤에 *이 있는게 실행가능한 파일이다(즉, 실행 권한이 있는 파일을 지칭한다.)

ls -R : 안에 있는 파일, dir 전부다 뒤진다.


-R (recursive) : 지정한 디렉토리 아래에 있는 하부디렉토리와 파일들을 모두 포함하여 출력한다.(하위경로와 그 안에 있는 모든 파일도 나열)
-d : 지정 디렉토리 내에 있는 파일을 제외한 디렉토리 목록만 출력한다.
-r (descending) : 출력 결과 정렬. 출력결과를 정렬할 때 내림차순으로 정렬한다.
-S : 파일 사이즈 정렬. 파일사이즈가 가장 큰 것부터 순서대로 나열한다.
-l : 파일들을 나열할때 자세히 출력한다.
-a (all) : 경로안의 모든 파일을 나열한다.(숨김파일도 포함)
-h (humanize) : 파일사이즈를 용량단위(Mb,Gb)를 붙여서 출력해 준다.
-n : 파일의 소유자와 소유그룹을 표기할때 숫자로 UID, GID로 출력한다.
-U : 디스크의 저장순서대로 파일을 나열한다.
-i : 각 파일들의 색인번호(inode)를 각 행의 맨 앞에 출력한다.
-1(숫자) : 한 줄에 한 파일씩만 나열한다.
-X : 확장자별로 정열하여 나열한다.
-F : 파일의 종류별로 파일의 끝에 특수문자를 표시한다.
일반파일 : 아무표시없음
실행파일 : *
디렉토리: /
심볼릭링크: @
FIFO파일 : |
소켓파일: =)

--------------------------------------------------------------------------------------------------------
cat file명 : 해당 파일의 내용을 보여주는데 한꺼번에 보여줌
cat /etc/hosts 이와 같이 짧은 내용을 사용할 때 주로 사용된다.
즉, 많은 양을 보게 될 경우에는 불편하다.

more/less file명 : 내가 보는 창에 맞춰서 보여준다.

more
b: 전화면 space : 다음 화면 enter: 넘어갈 때 q: 그만둘 때

less
more 단점 보안less는 검색, 상하좌우, 및 해당 page를 보여주지 않는다.
즉, 움직일 수 있다는 장점이 있다. 

head -숫자 file명 (숫자 default는 10이다)
 == head -n 숫자 file명 (숫자 default는 10이다)
해당 파일의 첫 라인부터 원하는 라인까지 내용 출력
 != head -n +5 file명 (숫자 default는 10이다)
: 해당 숫자 부터 첫라인까지 출력

tail -숫자 file명 (숫자 default는 10이다)
== tail -n 숫자 file명 (숫자 default는 10이다)
해당 파일 내용의 마지막라인부터 위로 원하는 라인수 출력
!= tail -n +숫자 file명 (숫자 default는 10이다)
: 해당 숫자 부터 마지막까지 출력

tail -f : 실시간으로 data가 들어올때 확인할 때 사용한다.
----------------------------------------------------------------------------------------------------------
wc : 라인수, 단어수, 파일의 크기를 알려주는 명령어
ex)wc /etc/passwd

리눅스에서의 단어의 의미
구분자로 쌓여 있는 형태

구분자 : 서로다른 문자들
일반문자 : 숫자, 영어, 한글,...
특수문자 : !,@,#,$,...
공간문자 : 띄어씌기(스페이스바), 탭

OS에서는 " "로 구분하는데
wc -a : 결과 4
1525#^%$71634345 #^&#%&		@%6#^# 2151355134
: 개수 4개
1525#^%$71634345	#^&#%&  
@%6#^#  	2151355134

나중에 authentication에서 식별할 때는 구분자로 구별해서
총 6개를 구별한다. 
1525#^%$71634345 #^&#%&		@%6#^# 2151355134
: 개수 6개
1525 	#^%$	71634345 	#^&#%& 
@%6#^# 	2151355134

==============================================================

디렉토리 관리 명령어
생성
nano file명
:enter : 나가게 된다.

touch : 내용이 비어있는 파일을 생성
          파일의 마지막 수정시간을 현재시간으로 변경(dir, file 상관없다.)

touch 파일경로1 파일경로2 파일경로3

디렉토리 생성
mkdir : 디렉토리 생성
	원하는 경로대로 디렉토리를 생성
	-p > 상위 경로가 없을 경우에 해당 경로를 같이 생성
	ex)mkdir c/cc/ccc/cccc : 에러
	ex)mkdir -p c/cc/ccc/cccc : 실행된다. 
----------------------------------------------------------------------------------------
삭제
rmdir : 해당 디렉토리를 삭제하는 명령어 
	조건 - 해당 디렉토리가 비어있어야 한다.
	ex)rmdir b:에러 왜? b가 비어있지 않기 때문에
	ex) rmdir b/bb/bbb/bbbb시에는 bbbb만 삭제된다.

	ex)rmdir -p /root/b/bb/bbb: 에러가 뜨는데 /root/ 자원이 동작 중
	ex)rmdir -p /tmp/b/bb/bbb: 에러가 뜨는데 /tmp/ 자원이 동작 중 
	/root/,/tmp/에서 삭제가 일어나지 않는 이유는 두 dir이 비어있지 않기 때문이다.

	/b/bb/bbb이 지워지는 이유는 비어있기 때문이다.


rm : 해당 대상을 삭제해주는 명령어

파일삭제
문법 : rm 삭제하는 대상의 path
rm file1 file2 file3 file4
rm -f file1 file2 file3 file4 : interactive 하지 않고 삭제

디렉토리 삭제
문법 : rm -r 삭제하는 대상의 path
rm -r dir1 dir2 dir3
rm -rf file1 file2 file3 file4 : interactive 하지 않고 삭제

기본적으로 리눅스는 root의 파일관리 명령어(cp,mv,rm)에 대해서 -i(interactive)옵션이 
기본적으로 붙어 있다.
----------------------------------------------------------------------------------------------------------

which rm 

ls-a

alias : 원하는 문자를 쳤을 때 해당 명령어 구문이 실행되도록 치환해주는 명령어
생성 : ex)alias ld='ls -ld' : ld를 ls -ld로 사용하겠다.
삭제 ; ex)unalias ld

su - centos

----------------------------------------------------------------------------------------------------------
복사, 이동

복사(cp-copy)
cp  원본 파일  사본파일 : 원본파일을 사본파일로 이름을 바꿔서 사본파일의 경로에 넣어줘라
cp  원본파일  디렉토리 :  원본파일 이름 그대로 디렉토리에 넣어라

기본 다중 파일 복사
cp  원본파일1 원본파일2 원본파일3  디렉토리 : 위의 일은 case by case로 실행해라

디렉토리 복사
cp   -r   원본디렉토리   사본디렉토리
		:1)디렉토리가 존재하지 않으면 디렉토리 이름으로 원본파일을 복사한다.
		:2)디렉토리가 존재하고 있으면 원본파일 이름으로 디렉토리안에 들어간다.


cp   -r  원본디렉토리1 원본디렉토리2 원본디렉토리3  디렉토리 
		:위의 일을 case by case로 실행
------------------------------------------------------------------------------------------------------------------------------------
기본 단독 파일 이동
 
mv  원본 파일  사본파일 : 원본 파일을 사본 파일의 경로에 사본파일 이름으로 이동
mv  원본파일  디렉토리 : 원본 파일을 디렉토리로 원본 이름대로 이동

기본 다중 파일 이동
mv  원본파일1 원본파일2 원본파일3  디렉토리 : 위의 일 그대로 실행

디렉토리 이동
mv     원본디렉토리   사본디렉토리 : 원본 디렉토리를 사본 디렉토리로 이동
mv  원본디렉토리1 원본디렉토리2 원본디렉토리3  디렉토리 : 위의 일 case by case로 실행
-----------------------------------------------------------------------------------------------------------------------------------------
파일삭제

단일 파일 삭제
rm 파일명 : 파일 삭제

다중파일 삭제
 rm 파일1 파일2 파일3 파일4 : 파일 삭제

단일 디렉토리삭제 
rm  -r  디렉토리 : 디렉토리 삭제

다중디렉토리 삭제
rm -r 디렉토리1 디렉토리2 디렉토리3 : 디렉토리 삭제













