DevOps
서비스가 방대해짐에 따라, 조직 운영도 바꿔야 할 필요가 생김

기존 서비스 조직
- 개발팀
- 운영팀
=> 개발은 언제나 소통이 안됨


따라서
마이크로 서비스 조직은 각 조직이 각각의 세부 서비스를 담당하고, 수시로 릴리즈

세부 서비스가 다운되면? 운영팀은?
서비스에 대한 이해도 부족하고 코드에 대해서 하나부터 열까지 알아야
하는 소통의 부족에서 나오는 단점을 명확하게 떠 앉게 된다.

개발팀과 운영팀의 비효율
개발팀 : 앞으로 릴리즈 자주 안하고 싶어한다.
운영팀 : 미리 완벽히 검증해서, 최대한 릴릴즈를 막아야 할거야
즉, 수시로 릴리즈를 못하게 된다


본래 새로운 기능 릴리즈하면, 개발팀이 운영팀에 어떻게 운영할지 알려줘야 함
- micro feature라면 많은 기능을 제대로 알려주기 어렵고
- 운영이 잘 안될 경우, 이 부분은 개발팀 역할이 아니므로 운영팀에 제대로 안 알려주는 경우가 많음

수많은 micro features를 운영팀이 제대로 이해하고 대응하지 않으면?
- 서비스 다운 또는 비정상 동작으로 고객 경험 극도로 저하

수많은 micro features와 수많은 사용자
- 엄청난 트래픽을 버텨낼 시스템과 운영팀 필요
------------------------------------------------------------------------------------------
 그렇다면 개발자가 운영팀에 들어가면?
- 운영효율적인 시스템 개발
- 운영을 자동화시켜서 운영팀 인력 효율화 가능
- 운영/개발 전체 이해/소통이 쉬움

하지만 아무도 안 하려고 한다.

=> 그래서 DevOps 부서가 생겨났다.

운영 + 운영시스템 효율화/자동화 프로젝트를 목표로 부여!
- 개발자가 목표를 가지고 개발을 할 수 있음
- 개발자는 micro features에 대해서도 빠르게 이해할 수 있음
----------------------------------------------
업무
- Release System 자동화
- 코드 리뷰, 테스트 자동화
- 서비스 모니터링 시스템
- 이슈 발생시 커뮤니케이션 시스템
=> 자동 배포

마이크로 서비스와 DevOps, 그리고 도커
-각 마이크로 서비스를 도커로 개발
-초대용량 서비스 유지 보수를 위한 서버 핸들링 필요
ex) 네트워크 트래픽에 따른 서버 관리 -> 쿠버네티스
-수시 릴리즈를 지원하기 위한 배포 시스템
	개발자가 git에 신규 코드를 릴리즈하면,
	Jenkins/Travis CI등으로 서버 자동 재가동 -> 배포 자동화
- 수시 릴리즈, 서비스는 중단되지 않았으면 좋겠음 -> 무중단 배포