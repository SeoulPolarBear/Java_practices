13. docker run 명령
ubuntu자체만 컨테이너를 만들 경우, 다음 명령으로 터미널 및 입력(STDIN)을 연결해줘야한다.
- unbuntu 컨테이너의 입력(STDIN) (-i옵션)을 가상 터미널(-t 옵션)에 할당해주어, 결과적으로 PC상에서의 입력이
ubuntu 컨테이너 입력에 들어갈 수 있도록 해준다.
- 이를 통해 ubuntu 컨테이너의 bash 쉘은 입력을 받을 수 있는 상태로, 종료되지 않고, 실행 중인 상태가 된다.

즉, 이미지를 생성하면서 바로 실행 해주는 명령어이다.


docker run 주요 옵션

------------------------------------------------------------------------------------
-i	| 컨테이너 입력(STDIN)을 열어놓는 욥션(주로 -it로 -i옵션과 -t 옵션을 함께 사용함)
	| 컨테이너 내부에 있는(컨테이너가 감싸고 있는) 프로그램에 외부 입력을 넣어야 하는데
	| 이를 하기 위해서는 i옵션을 이용해서 외부 통로를 열어놓는 역할이다. 
------------------------------------------------------------------------------------
-t 	| 가상 터미널(tty)을 할당한느 옵션(주로 -it로 -i옵션과 -t 옵션을 함께 사용함)
	| i로 컨테이널을 오픈하고 거기에 가상터미널을 할당해 표준입력을 할 수 있게 하는 역할이다.
------------------------------------------------------------------------------------
--name| 컨테이너 이름을 설정하는 옵션
------------------------------------------------------------------------------------
-d 	| 컨테이너를 백그라운드에서 실행하는 옵션
------------------------------------------------------------------------------------
--rm 	| 컨테이너 종료시 컨테이너를 자동으로 삭제하는 옵션
------------------------------------------------------------------------------------
-p 	| 호스트와 컨테이너 포트를 연결하는 옵션
------------------------------------------------------------------------------------
-v 	| 호스트와 컨테이너 디렉토리를 연결하는 옵션
------------------------------------------------------------------------------------


참고 : pseudo tty
- tty는 teletypewriter의 약자로, 리눅스(유닉스 계열)에서는 콘솔 또는 터미널을 의미한다.
- tty(파일이다.)를 통해 리눅스에 키보드 입력을 전달할 수 있으며, 하나의 tty 이외에 다양한 터미널(즉, 여러개의 터미널)
에서 접속을 지원하기 위해, 두번째 tty부터 가상(pseudo)이라는 말이 붙어서, pseudo tty라고 이야기 한다.
-------------------------------------
-컨테이너 생성 실행과 동시에 컨테이너 안드로 들어가는 코드
docker run -it ubuntu
# 컨테이너 실행 후, 해당 ubuntu 내로 들어가(즉, 컨테이너 내부의 프로그램), 터미널로 명령을 진행할 수 있다.

-------------------------------------
-내가 지정한 이름으로 컨테이너를 생성하는 방법
docker run -it --name myubuntu2 ubuntu 

# 컨테이너 이름을 원하는 이름으로 변경시
(myubuntu2라는 이름으로 생성하고 실행하겠다는 뜻이다.)
-> 실행하게 되면 root@018be63a396c: 이렇게 계정이 바뀜을 알 수 있다. 즉, 컨테이너 내부로 들어가게 된다 
-> 즉, 쉘의 프롬프트의 내용이다.

--------------------------------------
컨테이너 종료시 자동으로 컨테이너까지 삭제하는 옵
docker run -it --rm --name myubuntu3 ubuntu
# exit 명령으로 종료시, 컨테이너도 중지

이러면 생성과 동시에 삭제가 되게 된다.
즉, exit으로 컨테이너를 빠저나왔을 때 myubuntu3가 없음을 docker ps -a로 확인할 수 있다.
즉, 간단한 test용도로 사용하기 좋을 것 같다.

---------------------------------------
컨테이너를 백그라운드로 실행하기(실행중인 상태이지만, 터미널로 입력은 입력은 받지 않은 상태로 만들어보기)
docker run -it -d --name myubuntu3 ubuntu

-> 실제 container ID가 출력됨 그럼 Up 상태로 남아있게 된다.

----------------------------------------
먄약 fore그라운드로 들어가고 싶으면 
docker attach myubuntu3(컨테이너 이름)

으로 들어가면 된다


------------------------------------------
14. 실행 중인 컨테이너 종료하기
- 컨테이너 종료하기
	- 이전에 백그라운드로 실행한 myubuntu3를 중지하려면, 다음 명령어 실행

docker stop myubuntu3

-중지한 컨테이너 재실행 : docker start 컨테이너 ID 혹은 이름
-중지한 컨테이너를 재부팅 하는 명령어 : docker restart 컨테이너 ID 혹은 이름

실행중인 컨테이너의 실행 상태를 잠깐 멈추는 명령은 
'docker pause'이며, 멈춘 컨테이너를 다시 실행하도록
하는 명령은 'docker unpause'이다.



-----------------------------------------------------------------------------------------------------
웹 서버를 이용한 -p옵션 이해하기


-웹 서버는 크게 두가지 프로그램이 많이 사용된다.
- apache
-nginx(엔진엑스)

15.1 apache 웹서버 공식 docker 찾기
- 각 docker 마다 공식 이름이 프로그램명과 동일한 경우가 일반적이지만, apache는 httpd 이름을 사용한다.
docker search httpd

너무 길 경우
docker search httpd --limit=5

-----------
15.2 이미지 다운로드받고 바로 컨테이너로 만들어 실행시키기 (-p 옵션 이해하기) 
- run이라는 명령어의 장점은 pull create start를 한번에 해결해준다.
-------
docker run httpd

이를 통해서 만약 컨테이너에 해당 이미지가 없으면 알아서 다운로드 받는다. latest로
하지만 문제점 : 
커멘드 라인에 다음 명령을 할 수 없다.(컨테이너가 foreground로 실행되고 있기 때문이다.)
- apache웹 서버가 실행된 상태로, 해당 프로그램 로그만 화면에 보여진다.
(다른 터미널로 docker ps를 명령하면, 해당 컨테이너가 실행 중임을 알 수는 있다,)
- Ctrl + C로 강제 중단하면 Exited 상태로 전환 된다.
- 따라서 -d옵션을 넣어서 실행을 시켜줘야 한다.
------
docker run -d --name apacheweb httpd

문제점 : 해당 웹 서버에 접속할 방법이 없다.
-포트 포워딩이 필요하다.
- docker를 실행한 PC를 Host PC라고 한다. -> 여기서는 EC2에 컨테이너를 만들었으니 호스트는 EC2가 된다.
- docker 컨테이너가 실행되면, 172.17.0.0/16 (서브넷 255.255.0.0)인 Private IP가 할당된다.
-호스트 IP에 특정 port로 access시, 해당 port를 docker 컨테이너의 특정 Private IP의 특정 포트로
변환해줄 수 있다. 이를 NAPT(Network Address Port Translation)기술이라고 한다.
- 이를 지원해주는 옵션이 -P이다.

즉, 아래와 같이 작성하면 apacheweb2 컨테이너는 apache 웹서버 프로그램을 실행하고, 호스트PC에 
9999포트로 접속하면, 자동으로 이를 해당 컨테이너의 80포트에 연결해 주겠다는 의미이다.

EC2(ubunutu라는 username 사용) -> port 9999로 접근 
-> 컨테이너 내부(private IP 컨테이너 내부에서만 통신하기 위해 사용)에서 
http를 사용하는 port 80과 매칭 시켜준다.

================================================
docker run -d -p 9999:80 --name apacheweb2 httpd
================================================

- 위와 같이 실행 후, 크롬브라우저 상에서 localhost:9999를 접속하면 내부 웹서버가 동작함을 알 수 있다. 

- 이제 외부에서 EC2로 들어가기 위해서는 보안 그룹의 인바운드 규칙에 인스턴스에 설정된 ID로 들어간다
-> 인바운드 규칙 편집
-> 규칙 추가 -> TCP, port : 9999 소스 : 0.0.0.0/0으로 해서 추가
-> It Works!라고 뜬다.


-----------------------------------------------------------------------------------------------------
웹 서버를 이용한 -v옵션 이해하기

7.3 나만의 웹 서비스 docker 만들기
- "It works"는 httpd 이미지의 apache 웹서버 기본 설정에 의해, /usr/local/apache2/htdocs폴더에 있는 index.html
에 적혀 이쓴ㄴ html태그이다.
- 따라서 , 해당 폴더를 내가 원하는 index.html 파일로 교체한다면 나의 웹페이지를 보여줄 수 있다.
- 호스트 PC 상에 나만의 index.html 파일이 있다면, -v 옵션을 사용해서, 호스트PC의 특정 폴더를 docker 컨테이너의 특정 폴더로 교체할 수 있다.
	- docker는 이미지를 기반으로 컨테이너를 만들기 때문에, 컨테이너 상에서 파일을 업데이트하거나, 생성할 경우, 컨		  테이너가 종료되면, 해당 파일은 없어지게 된다.
		- 이를 보완하기 위해, 특정 폴더를 -v 옵션으로 교체(공유 또는 바인딩이라는 용어를 더 많이 사용함)하면, 
		  해당 폴더는 호스트 PC 상에 있기 때문에, 컨테이너가 종료되더라도, 파일을 유지할 수 있다.


# -v 옵션만 쓴다면 다음과 같이 작성 가능
docker run -v 호스트PC의_절대경로:도커_컨테이너_절대경로 httpd

# 다른 옵션과 함께 사용한 실제 예(호스트PC 경로에 한글이나 띄어쓰기가 있다면 따옴표로 묶어줘야 함)
docker run -d - p 9999:80 -v "Users/user/OneDrive/바탕 화면/Inflearn_Tutorial/GO 언어":
/usr/local/apache2/htdocs --name apacheweb2 httpd

---------------------------
즉, 만약 Database를 사용하고 있는데 컨테이너를 지워야 하는 경우가 발생할 수 있다. 이때 
백업용인 내 호스트 PC를 가리키지 않고 컨테이너에서만 사용하고 있을 경우 컨테이너를 지우면 그 즉시 DB의 data가 삭제된다. 
하지만 내 PC를 가리키고 있으면 -v를 가리키고 있으면 DB의 data를 재사용할 수 있기 때문에 이럴때 사용한다.
----------------------------
실습 
FileZila 다운로드 
https://filezilla-project.org/download.php?platform=win64
-> 호스트 클릭(file 바로 아래 있다.) -> DOckerTest site 생성 ->cloud Host, IP 입력 
Protocol : SFTP로 변경 -> Logon Type : key File로 변경 -> user(ubuntu), keyfile(ppk) 입력 
-> 연결 -> 업로드 할 폴더 선택 -> 우클릭 -> 업로드 -> EC2 보안 확인 ->
-> docker run -d -p 80:80 -v /home/ubuntu/2021_DEV_HTML:/usr/local/apache2/htdocs --name apacheweb2 httpd 실행 -> host : 80 들어가면 이제 홈페이지를 볼 수 있다.
-> 이제는 SFTP를 이용해서 폴더를 덮어씌기하면 다시 컨테이너를 생성할 필요없이 업데이트가 가능하다.