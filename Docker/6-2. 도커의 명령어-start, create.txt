docker 명령 옵션 선택자(이미지ID / 컨테이너 등)
docker는 image와 container 명령이 각각 별도로 존재

--------
docker image 명령 옵션 ...
docker container 명령 옵션 ...
--------
하지만 명령어는 어차피 다르므로, 굳이 image 또는 container를 붙이지 않아도 되지만
최근에는 해당 키워드를 붙여주는 경향도 있다.



Docker image 주요 명령어
----------------------------------------------------------------------------------------
1. 이미지 다운로드 받기위한 Docker Hub 가입

2. docker hub 로그인
docker login

3. docker 로그 아웃 // 잘 사용하지 않는다.
docker logout

4. 다운로드 받을 이미지 검색
docker search --limit=5 ubuntu // 5개만 보여달라고 할 때 사용된다.

참고 : search 결과 중 NAME이 nuagebed/ubuntu와 같이 / 가 있는 경우는 
Docker Hub 사용자명(이미지 만든 사람) / 해당 이미지 (즉, 공식 이미지가 아니라는 뜻이다.)
-> ubuntu로만 검색이 되는 것은 공식이라는 뜻이 된다.

docker 이미지 :[태그]
-태그에는 보통 버전을 많이 쓴다. 하지만 bionic 같은 내가 구별을 하기 위해서 넣기도 한다.
- 태그를 붙히지 않으면 latest로 버전이 표시된다.

5. docker image 다운로드
docker pull 이미지:[태그]

6. docker image 확인
docker images
docke images ls

7. docker image ID만 확인
docker images ls -q

8. 다운로드 받은 이미지 삭제하기
docker rmi 명령과 docker image rm 명령으로 동일한 기능을 수행할 수 있음
# docker rmi 명령
docker rmi 이미지ID(또는 이미지 REPOSITORY 이름)

9. 컨테이너 생성

docker create ubuntu

docker create --name 컨테이너이름 사용할이미지이름
docker create --name myubuntu ubuntu

- 각 이미지는 컨테이너로 만들어줘야, 실행 가능함
- 이미지와 컨테이너는 각각 관리해줘야 함
- 컨테이너 생성시, docker 프로그램에서 이름이 자동 부여됨(2번 항목에서 확인 가능)

10. 생성된 컨테이너 확인
- 현재 실행 중인 컨테이너 확인
docker ps

- 실행 중이지 않은 컨테이너까지 포함해서, 전체 컨테이너 확인
	- 맨 끝의 NAMES에 기재된 이름이 컨테이너 이름입니다.
docker ps -a

------------------------------------------------------------------------------------
CONTAINER ID 	| 컨테이너 ID
------------------------------------------------------------------------------------
IMAGE 		| 이미지 이름
------------------------------------------------------------------------------------
COMMAND 		| 컨테이너 실행시 실행되는 프로세스 이름 ex) Ubuntu는 bash 사용
------------------------------------------------------------------------------------
CREATED 		| 컨테이너 생성 후 경과 시간
------------------------------------------------------------------------------------
STATUS 		| 컨테이너 실행 상태 (Created : 생성, Up : 실행 중, Existed : 종료)
------------------------------------------------------------------------------------
PORT 			| 호스트와 컨테이너 포트 사이 연결 관계
------------------------------------------------------------------------------------
NAMES 		| 컨테이너 이름 //옵션에 내가 지정한 이름을 넣으면 그 이름이 되지만 
			| // 넣지 않으면 docker에서 의미 있을 만한 이름을 붙여준다.
------------------------------------------------------------------------------------


도커는 어떤 프로그램을 감싼다.
컨테이너는 즉, 어떤 프로그램을 실행하는 것이다가 된다.
각각의 컨테이너에서 실행에 쓰이는 명령이 무엇인지를 기제해 놓은 게 COMMAND이다.



11. 생성된 컨테이너 ID만 확인
docker ps -a -q

12. docker 컨테이너 삭제
docker rm 삭제할 컨테이너 이름(컨테이너 리스트의 NAMES 에 있는 이름을 의미함)
docker rm 삭제할 컨테이너 ID(구별만 되게 ex) 8b 이정도만 써도 인식을 한다.)

한번에 컨테이너 삭제하는 방법 : docker rm -f ${docker ps -qa}


12. 컨테이너 실행
docker start 컨테이너이름(컨테이너 ID도 가능하다.)
하지만 바로 종료가 될 것이다.

이유는?
- 해당 명령은 /bin/bash 이고, 이는 bash 라는 쉘 프로그램이다.(bash는 리눅스의 기본 쉘 프로그램)
- 해당 명령은 테미널을 통해, 키보드 입력을 표준 스트림 중 표준 입력(STDIN)으로 받을 수 있는 상태여야,
대기 상태로 계속 실행되며, 그렇지 않다면 입력을 받을 수 없어 종료 된다.
- 따라서 단순히 docker start myubuntu와 같이 별도 터미널 및 표준 입력 연결 설정 없이 실행 시,
실행하자마자 끝나고, 이에 따라 해당 컨테이너도 바로 중지상태가 된다.

※ 표준 스트림(standard streams)
- 리눅스(유닉스 계열)에서 동작하는 프로그램은 실행시, 세 개의 스트림이 오픈된다,
	-STDIN : standard input(표준 입력)
	- STDOUT: standard output(표준 출력)
	-STDERR : standard error(표준 에러)
- 보통 터미널을 오픈하고, 명령을 실해하면 터미널의 표준 스트림이 명령에 해당한느 프로세스에 상속되어
해당 프로세스는 터미널의 표준 입출력을 사용할 수 있게 된다,
- 터미널 시행시 보통 쉘 프로그램이 실행되고, 쉘 프로그램을 통해, 명령을 실행하면 명령에 해당하는 프로그램을 쉘 프로그램이 실행한다
- 이 때 내부적으로 쉘 프로그램은 fork()시스템콜을 사용해서 명령에 해당하는 프로그램을 실행시킨다,
- fork() 시스템 콜을 사용할 경우, 해당 함수를 호출하는 프로그램은 부모 프로세스가 되고, fork()를 통해 실행되는 프로그램은 자식 프로세스가 됨
- 더 깊이는 부모 프로세스가 자식 프로세스에 복사되고, 이후에 자식 프로세스 실행에 필요한 데이터가 업데이트되는 형태로 실행되므로 부모 프로세스의 표준 입출력은 그대로 자식 프로세스에 복사되기 때문에 결과적으로 상속과 유사한 기능을 하게 되는 것이다.




