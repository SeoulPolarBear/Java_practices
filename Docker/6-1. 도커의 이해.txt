Docker Internals
docker는 리눅스 컨테이너부터 시작된 기술이다.

LXC(LinuX Containers)
- 단일 컴퓨팅 시스템에 설치된 리눅스 운영체제 상에서, 다른 영역과 완전히 분리된 별도의 
리눅스 시스템을 운영할 수 있는 리눅스 커널 기술
- 리눅스 운영체제 레벨에서 영역과 자원 할당(CPU, Ram, network 등)을 분리하여, 마치
별도의 시스템처럼 사용할 수 있는 기술을 의미함
	- 다른 가상 시스템의 경우, 하드웨어 레베렝서 별도의 컴퓨터인 것처럼 분리해서 사용할 수 있는
	  기술도 있다. 이를 운영체제 레벨에서 할 수 있는 기술이라고 이해하면 쉽다.
- docker는 리눅스 커널에 LXC 기술을 사용해서,
	- 리눅스 컨테이너를 만든다(분리된 공간을 리눅스 컨테이너라고 부름)
	- 리눅스 컨테이너 상에 별도로 구성된 파일 시스템에 시스템 설정 및 응용 프로그램을 실행할 수 
	  있도록 하는 기술을 정의한 것이다.

초기 docker는 LXC 기술을 기반으로 구현되었으나, 최근에는 별도 컨테이너 기술을 구현하여 사용하고 있다.
-------------------------------------------------------------------------------------------
Docker 주요 구성 요소
-----------------------
docker Engine
- docker는 서버 /클라이언트 구조로 이루어짐
	- 서버는 docker daemon process(데몬 프로세스) 형태로 동작함
		- 데몬이란, 계속 실행 중인 프로그램을 말한다. 계속 떠있는 상태
	- docker daemon process에 요청하기 위해 , 프로세스간 통신 기법이 필요하며, docker는 이를 위해
	  Rest API를 사용함
		- 참고 : 더 깊은 이해를 위해서는 CS 운영체제의 프로세스 구조와 프로세스간 커뮤니케이션 부분을 		   이해해야 한다. 
- docker command는 일종의 크라이언트라고 이해하면 된다.
	- docker command를 내리면, 결국 내부적으로 Rest API를 사용해서, docker daemon process를 호출하	   는 방식
	- ex) 
		docker ps라고 명령하며, 내부적으로는 마치 다음 명령어 처럼 Rest API로 호출함
			- http GET 'docker daemon process'/api-version/containers
-----------------------
docker image
- docker 컨테이너를 생성하기 위한 명령들을 가진 템플릿
- 여러 이미지들을 layer로 쌍아서, 원하는 형태의 이미지를 만드는 것이 일반적이다.
	- ex) ubuntu 이미지에, apache 웹 서버 이미지를 얹어서, 웹 서버 이미지를 만듦

-----------------------
docker container
- docker image가 리눅스 컨테이너 형태로 실행한 상태 (instance)를 의미함
- docker daemon에 있는 커널에서 LXC(즉, 자원을 할당해 준다.)로 리눅스 컨테이너를 만들고, 해당 컨테이너에 docker image에 포함된 명령을 실행하여, docker container를 만들고 실행함
- docker container는 분리된 공간이므로, docker daemon process를 통해, 접속할 수도 있고, 내부에 들어가서, 코드 수정, 재실행 등도 가능함
------------------------------------------------
결국 docker는 image와 container를 다뤄서, 작업을 한다고 생각을 하면 된다.
ex) 하나의 image로 독립해서 돌아가는 container를 만들 수 있다. 클래스 - 객체 느낌




















