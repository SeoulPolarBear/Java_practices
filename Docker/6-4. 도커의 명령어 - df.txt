8 docker가 사용하고 있는 저장 매체 현황 확인하기

-추후 docker가 사용하는 저장매체 공간이 이슈가 될 수도 있으므로 관련 명령어는 알아야 한다,
1. docker system df
※ df 명령어가 모든 저장매체를 확인할 수 있다.


docker 와 alpine
- docker 이미지는 여러개의 이미지가 계층(layer)으로 쌓인 형태로 작성이 됨
	- 예를 들어, C라이브러리 이미지를 쌓고, 여기에 bash와 같은 쉘 프로그램 이미지를 쌓고, 여기에 응용 프로그램 이미지	쌓는 방식
- 통상 리눅스 사용시, 다양한 기능을 가진 ubuntu 등의 리눅스 패키지를 사용하지마, docker 컨테이너의 경우는 특정응용 프로그램 실행을 목적으로 하는 경우가 많기 때문에, 다양한 기능을 모두 포함할 필요가 없음(동일한 기능을 한다면, 도커 이미지/컨테이너 사이즈가 작으면 작을 수록 좋다.)

- 대부분의 docker 이미지애 가장 기본이 되는 이미지는 ubuntu가 아니라, alpine인 경우가 많다.

	- alpine은
		- musl libc라는 임베디드 리눅스(초경량 시스템을 위한 리눅스 시스템)를 위한 C/POSIX libary (C 언어를 위한 		 기본 및 POSIX라는 표준 규격에 맞춘 기본 함수를 포함한 라이브러리) 와
		- BusyBox는 운영체제 운영에 필요한 가장 기본이 되는 유틸리티(시스템 프로그램)만 모아놓은 리눅스 패키지

즉, 나는 우분투의 모든 기능을 쓰고 싶은게 아니라 웹 서버 기능만 쓰고 싶은 상황이다.
이때 축소된 버전으로된 우분투를 다운받을 방법이 없을까? 라는 생각을 할 수 있다.

--------------------------
httpd와 alpine

- httpd도 태그 중에 alpine 기반 태그가 있음
	- https:/hub.docker.com/_/httpd?tab=tags&page=1&ordering=last_updated
- httpd:alpine 실행해보기
docker run -d -p 80:80 -v /home/ubuntu/2021_DEV_HTML:/usr/local/apache2/htdocs --name apacheweb2 httpd:alpine

---------------------------------------------------------------------------------------------------------
9 실행 중인 컨테이너 사용 리소스 확인하기
- 실행 중인 컨테이너의 시스템 리소스 상용현황을 확인할 수 있음
- 종료 Ctrl + C로 종료할 수 있음
docker container stats

---------------------------------------------------------------------------------------------------------
10. 실행중인 컨테이너에 명령 실행하기
- 컨테이너가 실행 중일 때에만 다음 명령을 실행할 수 있다.
보통 가장 많이 사용은 컨테이너 안에 있는 쉘을 실행 시켜서 내가 컨테이너 안으로 들어가기 위헤서 사용한다.

docker exec 옵션 컨테이너_ID 명령 인자

테스트 
- -it: docker run에서 설명한 표준입력(-i),(-t)옵션이며, docker exec에서도 사용가능
- 다음과 같이 명령하면, bin/sh 쉘 프로그램을 실행하면서, 터미널에 연결되므로 , 컨테이너 안으로 들어갈 수 있음
	- /bin/bash가 아닌 /bin/sh 를 쓴 이유는 /bin/bash는 alpine 리눅스에는 들어 있지 않기 때문(꼭 필요한 프로그램만 들어	  가 있기 때문) 

docker exec -it apacheweb2 /bin/sh

cd /usr/local/apache2/htdocs -> 여기에 실습 파일이 존재한다.

---------------------------------------------------------------------------------------------------------
11. 실행중인 컨테이너에 연결하기
- docker run 으로 다음과 같이 터미널을 연결해놓은 상태로, 백그라운드로 실행시
	- 여러 옵션은 "-dit"와 같이 한번에 붙여써도 되고, 다음과 같이 나눠써도 된다.

docker run -it -d --name myubuntu3 ubuntu

- 다음과 같이 실행하면, 해당 컨테이너에 연결되어 컨테이너 내에서 쉘 프로그램을 사용하여, 명령을 내룰 수 있다.

docker attach myubuntu3 # docker attach 컨테이너_ID

단, 이명령어 실행후 exit하면 해당 컨테이너는 exited가 됐음을 알 수 있다.
exec 명령은 해당 컨테이너에 신규 명령을 실행하는 명령이고, attach는 컨테이너에 연결하는 명령이다.

---------------------------------------------------------------------------------------------------------
12. 모든 컨테이너 삭제하기 (+모든 docker 이미지 삭제하기)
- 위와 같이 docker run 명령을 가장 많이 사용할 수 밖에 없는 상황이지마, docker run 사용시 컨테이너가 별도로 생성됨.
- 따라서, 모든 컨테이너를 한번에 지우고 싶은 경우가 있으며, 다음과  같음 명령 조합으로 가능하다.

※ 현업에서도 그대로 적어놓고, 필요할 때마다 복사/붙여넣기로 실행하는 것이 일반적이다.

# 모든 컨테이너 삭제를 위해, 우선 컨테이너를 모두 중지시킨 후, 삭제해야한다.
docker stop $(docker ps -a -q) #모든 컨테이너 중지
docker rm $(docker ps -a -q) # 모든 컨에티너 삭제 (아이디만 알려주기 때문에 -q 사용)

- 추가로 모든 docker 이미지 삭제 명령도 다음과 같다
docker rmi &(docker images -q)

- 한번에 컨테이너 중지, 삭제, 이미지 삭제하기(각자 별도로 적어 놓고, 한번에 실행하기)
docker stop $(docker ps -a -q)
docker rm &(docker ps -a -q)
dcker rmi -f &(docker images -q)

- 별도로 다음 명령도 사용가능
	- 하지만, 다음 명령은 실행중인 container, 또는 실행 중인 컨테이너의 images 등은 삭제하지 않음
		-따라서, 생각보다는 맣ㄴ이 사용되지는 않음(참고로만 알아두면 될 것 같습니다.)

docker container prune # 정지된 컨테이너 삭제
docker image prune # 실행중인 컨테이너 image 외의 이미지 삭제
docker system prune # 정지된 컨테이너, 실행중인 컨테이너 이미지 외의 이미지, 볼륨, 네트워크 삭제

참고사항
-v : 볼륨이라는 뜻 즉, 호스트PC에 특정 폴더를 연결해 놓는 것만 볼륨이라 하지 안고
특정 컨테이너에 특정 폴더를 호스트 PC에 docker가 관리하는 파일 시스템에서 관리를 할 수 있다. 
그렇게 관리되는 볼륨들은 이미지나 컨테이너를 삭제한다고 해서 삭제가 되지 않는다. 그럴 때 system 명령을 사용해야 한다.








